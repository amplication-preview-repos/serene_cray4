/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AlcoholConsumptionSurveyService } from "../alcoholConsumptionSurvey.service";
import { AlcoholConsumptionSurveyCreateInput } from "./AlcoholConsumptionSurveyCreateInput";
import { AlcoholConsumptionSurvey } from "./AlcoholConsumptionSurvey";
import { AlcoholConsumptionSurveyFindManyArgs } from "./AlcoholConsumptionSurveyFindManyArgs";
import { AlcoholConsumptionSurveyWhereUniqueInput } from "./AlcoholConsumptionSurveyWhereUniqueInput";
import { AlcoholConsumptionSurveyUpdateInput } from "./AlcoholConsumptionSurveyUpdateInput";

export class AlcoholConsumptionSurveyControllerBase {
  constructor(protected readonly service: AlcoholConsumptionSurveyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AlcoholConsumptionSurvey })
  async createAlcoholConsumptionSurvey(
    @common.Body() data: AlcoholConsumptionSurveyCreateInput
  ): Promise<AlcoholConsumptionSurvey> {
    return await this.service.createAlcoholConsumptionSurvey({
      data: {
        ...data,

        survey: data.survey
          ? {
              connect: data.survey,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        q1: true,
        q2: true,
        q3: true,
        q4: true,
        q5: true,
        q6: true,
        q7: true,
        q8: true,
        q9: true,
        q10: true,
        q11: true,
        q12: true,
        q13: true,
        q14: true,
        q15: true,
        q16: true,
        q17: true,
        q18: true,
        q19: true,
        q20: true,
        q21: true,
        q22: true,
        q23: true,
        q24: true,
        q25: true,

        survey: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AlcoholConsumptionSurvey] })
  @ApiNestedQuery(AlcoholConsumptionSurveyFindManyArgs)
  async alcoholConsumptionSurveys(
    @common.Req() request: Request
  ): Promise<AlcoholConsumptionSurvey[]> {
    const args = plainToClass(
      AlcoholConsumptionSurveyFindManyArgs,
      request.query
    );
    return this.service.alcoholConsumptionSurveys({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        q1: true,
        q2: true,
        q3: true,
        q4: true,
        q5: true,
        q6: true,
        q7: true,
        q8: true,
        q9: true,
        q10: true,
        q11: true,
        q12: true,
        q13: true,
        q14: true,
        q15: true,
        q16: true,
        q17: true,
        q18: true,
        q19: true,
        q20: true,
        q21: true,
        q22: true,
        q23: true,
        q24: true,
        q25: true,

        survey: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AlcoholConsumptionSurvey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async alcoholConsumptionSurvey(
    @common.Param() params: AlcoholConsumptionSurveyWhereUniqueInput
  ): Promise<AlcoholConsumptionSurvey | null> {
    const result = await this.service.alcoholConsumptionSurvey({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        q1: true,
        q2: true,
        q3: true,
        q4: true,
        q5: true,
        q6: true,
        q7: true,
        q8: true,
        q9: true,
        q10: true,
        q11: true,
        q12: true,
        q13: true,
        q14: true,
        q15: true,
        q16: true,
        q17: true,
        q18: true,
        q19: true,
        q20: true,
        q21: true,
        q22: true,
        q23: true,
        q24: true,
        q25: true,

        survey: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AlcoholConsumptionSurvey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAlcoholConsumptionSurvey(
    @common.Param() params: AlcoholConsumptionSurveyWhereUniqueInput,
    @common.Body() data: AlcoholConsumptionSurveyUpdateInput
  ): Promise<AlcoholConsumptionSurvey | null> {
    try {
      return await this.service.updateAlcoholConsumptionSurvey({
        where: params,
        data: {
          ...data,

          survey: data.survey
            ? {
                connect: data.survey,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          q1: true,
          q2: true,
          q3: true,
          q4: true,
          q5: true,
          q6: true,
          q7: true,
          q8: true,
          q9: true,
          q10: true,
          q11: true,
          q12: true,
          q13: true,
          q14: true,
          q15: true,
          q16: true,
          q17: true,
          q18: true,
          q19: true,
          q20: true,
          q21: true,
          q22: true,
          q23: true,
          q24: true,
          q25: true,

          survey: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AlcoholConsumptionSurvey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAlcoholConsumptionSurvey(
    @common.Param() params: AlcoholConsumptionSurveyWhereUniqueInput
  ): Promise<AlcoholConsumptionSurvey | null> {
    try {
      return await this.service.deleteAlcoholConsumptionSurvey({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          q1: true,
          q2: true,
          q3: true,
          q4: true,
          q5: true,
          q6: true,
          q7: true,
          q8: true,
          q9: true,
          q10: true,
          q11: true,
          q12: true,
          q13: true,
          q14: true,
          q15: true,
          q16: true,
          q17: true,
          q18: true,
          q19: true,
          q20: true,
          q21: true,
          q22: true,
          q23: true,
          q24: true,
          q25: true,

          survey: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
