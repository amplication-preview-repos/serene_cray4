/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AlcoholConsumptionSurvey as PrismaAlcoholConsumptionSurvey,
  Survey as PrismaSurvey,
} from "@prisma/client";

export class AlcoholConsumptionSurveyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AlcoholConsumptionSurveyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.alcoholConsumptionSurvey.count(args);
  }

  async alcoholConsumptionSurveys(
    args: Prisma.AlcoholConsumptionSurveyFindManyArgs
  ): Promise<PrismaAlcoholConsumptionSurvey[]> {
    return this.prisma.alcoholConsumptionSurvey.findMany(args);
  }
  async alcoholConsumptionSurvey(
    args: Prisma.AlcoholConsumptionSurveyFindUniqueArgs
  ): Promise<PrismaAlcoholConsumptionSurvey | null> {
    return this.prisma.alcoholConsumptionSurvey.findUnique(args);
  }
  async createAlcoholConsumptionSurvey(
    args: Prisma.AlcoholConsumptionSurveyCreateArgs
  ): Promise<PrismaAlcoholConsumptionSurvey> {
    return this.prisma.alcoholConsumptionSurvey.create(args);
  }
  async updateAlcoholConsumptionSurvey(
    args: Prisma.AlcoholConsumptionSurveyUpdateArgs
  ): Promise<PrismaAlcoholConsumptionSurvey> {
    return this.prisma.alcoholConsumptionSurvey.update(args);
  }
  async deleteAlcoholConsumptionSurvey(
    args: Prisma.AlcoholConsumptionSurveyDeleteArgs
  ): Promise<PrismaAlcoholConsumptionSurvey> {
    return this.prisma.alcoholConsumptionSurvey.delete(args);
  }

  async getSurvey(parentId: string): Promise<PrismaSurvey | null> {
    return this.prisma.alcoholConsumptionSurvey
      .findUnique({
        where: { id: parentId },
      })
      .survey();
  }
}
