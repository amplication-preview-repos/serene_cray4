/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Outlet } from "./Outlet";
import { OutletCountArgs } from "./OutletCountArgs";
import { OutletFindManyArgs } from "./OutletFindManyArgs";
import { OutletFindUniqueArgs } from "./OutletFindUniqueArgs";
import { CreateOutletArgs } from "./CreateOutletArgs";
import { UpdateOutletArgs } from "./UpdateOutletArgs";
import { DeleteOutletArgs } from "./DeleteOutletArgs";
import { OutletSurveyFindManyArgs } from "../../outletSurvey/base/OutletSurveyFindManyArgs";
import { OutletSurvey } from "../../outletSurvey/base/OutletSurvey";
import { Province } from "../../province/base/Province";
import { OutletService } from "../outlet.service";
@graphql.Resolver(() => Outlet)
export class OutletResolverBase {
  constructor(protected readonly service: OutletService) {}

  async _outletsMeta(
    @graphql.Args() args: OutletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Outlet])
  async outlets(@graphql.Args() args: OutletFindManyArgs): Promise<Outlet[]> {
    return this.service.outlets(args);
  }

  @graphql.Query(() => Outlet, { nullable: true })
  async outlet(
    @graphql.Args() args: OutletFindUniqueArgs
  ): Promise<Outlet | null> {
    const result = await this.service.outlet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Outlet)
  async createOutlet(@graphql.Args() args: CreateOutletArgs): Promise<Outlet> {
    return await this.service.createOutlet({
      ...args,
      data: {
        ...args.data,

        province: args.data.province
          ? {
              connect: args.data.province,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Outlet)
  async updateOutlet(
    @graphql.Args() args: UpdateOutletArgs
  ): Promise<Outlet | null> {
    try {
      return await this.service.updateOutlet({
        ...args,
        data: {
          ...args.data,

          province: args.data.province
            ? {
                connect: args.data.province,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Outlet)
  async deleteOutlet(
    @graphql.Args() args: DeleteOutletArgs
  ): Promise<Outlet | null> {
    try {
      return await this.service.deleteOutlet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [OutletSurvey], { name: "outletSurveys" })
  async findOutletSurveys(
    @graphql.Parent() parent: Outlet,
    @graphql.Args() args: OutletSurveyFindManyArgs
  ): Promise<OutletSurvey[]> {
    const results = await this.service.findOutletSurveys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Province, {
    nullable: true,
    name: "province",
  })
  async getProvince(
    @graphql.Parent() parent: Outlet
  ): Promise<Province | null> {
    const result = await this.service.getProvince(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
