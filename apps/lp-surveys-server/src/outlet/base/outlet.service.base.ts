/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Outlet as PrismaOutlet,
  OutletSurvey as PrismaOutletSurvey,
  Province as PrismaProvince,
} from "@prisma/client";

export class OutletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OutletCountArgs, "select">): Promise<number> {
    return this.prisma.outlet.count(args);
  }

  async outlets(args: Prisma.OutletFindManyArgs): Promise<PrismaOutlet[]> {
    return this.prisma.outlet.findMany(args);
  }
  async outlet(
    args: Prisma.OutletFindUniqueArgs
  ): Promise<PrismaOutlet | null> {
    return this.prisma.outlet.findUnique(args);
  }
  async createOutlet(args: Prisma.OutletCreateArgs): Promise<PrismaOutlet> {
    return this.prisma.outlet.create(args);
  }
  async updateOutlet(args: Prisma.OutletUpdateArgs): Promise<PrismaOutlet> {
    return this.prisma.outlet.update(args);
  }
  async deleteOutlet(args: Prisma.OutletDeleteArgs): Promise<PrismaOutlet> {
    return this.prisma.outlet.delete(args);
  }

  async findOutletSurveys(
    parentId: string,
    args: Prisma.OutletSurveyFindManyArgs
  ): Promise<PrismaOutletSurvey[]> {
    return this.prisma.outlet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .outletSurveys(args);
  }

  async getProvince(parentId: string): Promise<PrismaProvince | null> {
    return this.prisma.outlet
      .findUnique({
        where: { id: parentId },
      })
      .province();
  }
}
