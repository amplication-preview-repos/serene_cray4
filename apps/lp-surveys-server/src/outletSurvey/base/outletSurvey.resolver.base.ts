/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OutletSurvey } from "./OutletSurvey";
import { OutletSurveyCountArgs } from "./OutletSurveyCountArgs";
import { OutletSurveyFindManyArgs } from "./OutletSurveyFindManyArgs";
import { OutletSurveyFindUniqueArgs } from "./OutletSurveyFindUniqueArgs";
import { CreateOutletSurveyArgs } from "./CreateOutletSurveyArgs";
import { UpdateOutletSurveyArgs } from "./UpdateOutletSurveyArgs";
import { DeleteOutletSurveyArgs } from "./DeleteOutletSurveyArgs";
import { Survey } from "../../survey/base/Survey";
import { Outlet } from "../../outlet/base/Outlet";
import { PoliceStation } from "../../policeStation/base/PoliceStation";
import { OutletSurveyService } from "../outletSurvey.service";
@graphql.Resolver(() => OutletSurvey)
export class OutletSurveyResolverBase {
  constructor(protected readonly service: OutletSurveyService) {}

  async _outletSurveysMeta(
    @graphql.Args() args: OutletSurveyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OutletSurvey])
  async outletSurveys(
    @graphql.Args() args: OutletSurveyFindManyArgs
  ): Promise<OutletSurvey[]> {
    return this.service.outletSurveys(args);
  }

  @graphql.Query(() => OutletSurvey, { nullable: true })
  async outletSurvey(
    @graphql.Args() args: OutletSurveyFindUniqueArgs
  ): Promise<OutletSurvey | null> {
    const result = await this.service.outletSurvey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OutletSurvey)
  async createOutletSurvey(
    @graphql.Args() args: CreateOutletSurveyArgs
  ): Promise<OutletSurvey> {
    return await this.service.createOutletSurvey({
      ...args,
      data: {
        ...args.data,

        survey: args.data.survey
          ? {
              connect: args.data.survey,
            }
          : undefined,

        outlet: args.data.outlet
          ? {
              connect: args.data.outlet,
            }
          : undefined,

        policeStation: args.data.policeStation
          ? {
              connect: args.data.policeStation,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OutletSurvey)
  async updateOutletSurvey(
    @graphql.Args() args: UpdateOutletSurveyArgs
  ): Promise<OutletSurvey | null> {
    try {
      return await this.service.updateOutletSurvey({
        ...args,
        data: {
          ...args.data,

          survey: args.data.survey
            ? {
                connect: args.data.survey,
              }
            : undefined,

          outlet: args.data.outlet
            ? {
                connect: args.data.outlet,
              }
            : undefined,

          policeStation: args.data.policeStation
            ? {
                connect: args.data.policeStation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OutletSurvey)
  async deleteOutletSurvey(
    @graphql.Args() args: DeleteOutletSurveyArgs
  ): Promise<OutletSurvey | null> {
    try {
      return await this.service.deleteOutletSurvey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Survey, {
    nullable: true,
    name: "survey",
  })
  async getSurvey(
    @graphql.Parent() parent: OutletSurvey
  ): Promise<Survey | null> {
    const result = await this.service.getSurvey(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Outlet, {
    nullable: true,
    name: "outlet",
  })
  async getOutlet(
    @graphql.Parent() parent: OutletSurvey
  ): Promise<Outlet | null> {
    const result = await this.service.getOutlet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => PoliceStation, {
    nullable: true,
    name: "policeStation",
  })
  async getPoliceStation(
    @graphql.Parent() parent: OutletSurvey
  ): Promise<PoliceStation | null> {
    const result = await this.service.getPoliceStation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
