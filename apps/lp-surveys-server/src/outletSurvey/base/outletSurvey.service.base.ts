/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OutletSurvey as PrismaOutletSurvey,
  Survey as PrismaSurvey,
  Outlet as PrismaOutlet,
  PoliceStation as PrismaPoliceStation,
} from "@prisma/client";

export class OutletSurveyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OutletSurveyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.outletSurvey.count(args);
  }

  async outletSurveys(
    args: Prisma.OutletSurveyFindManyArgs
  ): Promise<PrismaOutletSurvey[]> {
    return this.prisma.outletSurvey.findMany(args);
  }
  async outletSurvey(
    args: Prisma.OutletSurveyFindUniqueArgs
  ): Promise<PrismaOutletSurvey | null> {
    return this.prisma.outletSurvey.findUnique(args);
  }
  async createOutletSurvey(
    args: Prisma.OutletSurveyCreateArgs
  ): Promise<PrismaOutletSurvey> {
    return this.prisma.outletSurvey.create(args);
  }
  async updateOutletSurvey(
    args: Prisma.OutletSurveyUpdateArgs
  ): Promise<PrismaOutletSurvey> {
    return this.prisma.outletSurvey.update(args);
  }
  async deleteOutletSurvey(
    args: Prisma.OutletSurveyDeleteArgs
  ): Promise<PrismaOutletSurvey> {
    return this.prisma.outletSurvey.delete(args);
  }

  async getSurvey(parentId: string): Promise<PrismaSurvey | null> {
    return this.prisma.outletSurvey
      .findUnique({
        where: { id: parentId },
      })
      .survey();
  }

  async getOutlet(parentId: string): Promise<PrismaOutlet | null> {
    return this.prisma.outletSurvey
      .findUnique({
        where: { id: parentId },
      })
      .outlet();
  }

  async getPoliceStation(
    parentId: string
  ): Promise<PrismaPoliceStation | null> {
    return this.prisma.outletSurvey
      .findUnique({
        where: { id: parentId },
      })
      .policeStation();
  }
}
