/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PoliceStationService } from "../policeStation.service";
import { PoliceStationCreateInput } from "./PoliceStationCreateInput";
import { PoliceStation } from "./PoliceStation";
import { PoliceStationFindManyArgs } from "./PoliceStationFindManyArgs";
import { PoliceStationWhereUniqueInput } from "./PoliceStationWhereUniqueInput";
import { PoliceStationUpdateInput } from "./PoliceStationUpdateInput";
import { OutletSurveyFindManyArgs } from "../../outletSurvey/base/OutletSurveyFindManyArgs";
import { OutletSurvey } from "../../outletSurvey/base/OutletSurvey";
import { OutletSurveyWhereUniqueInput } from "../../outletSurvey/base/OutletSurveyWhereUniqueInput";
import { SurveyFindManyArgs } from "../../survey/base/SurveyFindManyArgs";
import { Survey } from "../../survey/base/Survey";
import { SurveyWhereUniqueInput } from "../../survey/base/SurveyWhereUniqueInput";

export class PoliceStationControllerBase {
  constructor(protected readonly service: PoliceStationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PoliceStation })
  async createPoliceStation(
    @common.Body() data: PoliceStationCreateInput
  ): Promise<PoliceStation> {
    return await this.service.createPoliceStation({
      data: {
        ...data,

        province: data.province
          ? {
              connect: data.province,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,

        province: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PoliceStation] })
  @ApiNestedQuery(PoliceStationFindManyArgs)
  async policeStations(
    @common.Req() request: Request
  ): Promise<PoliceStation[]> {
    const args = plainToClass(PoliceStationFindManyArgs, request.query);
    return this.service.policeStations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,

        province: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PoliceStation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async policeStation(
    @common.Param() params: PoliceStationWhereUniqueInput
  ): Promise<PoliceStation | null> {
    const result = await this.service.policeStation({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,

        province: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PoliceStation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePoliceStation(
    @common.Param() params: PoliceStationWhereUniqueInput,
    @common.Body() data: PoliceStationUpdateInput
  ): Promise<PoliceStation | null> {
    try {
      return await this.service.updatePoliceStation({
        where: params,
        data: {
          ...data,

          province: data.province
            ? {
                connect: data.province,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          address: true,

          province: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PoliceStation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePoliceStation(
    @common.Param() params: PoliceStationWhereUniqueInput
  ): Promise<PoliceStation | null> {
    try {
      return await this.service.deletePoliceStation({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          address: true,

          province: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/outletSurveys")
  @ApiNestedQuery(OutletSurveyFindManyArgs)
  async findOutletSurveys(
    @common.Req() request: Request,
    @common.Param() params: PoliceStationWhereUniqueInput
  ): Promise<OutletSurvey[]> {
    const query = plainToClass(OutletSurveyFindManyArgs, request.query);
    const results = await this.service.findOutletSurveys(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        q1: true,
        q2: true,
        q3: true,
        q4: true,
        q5: true,
        q6: true,
        q7: true,
        q8: true,
        q9: true,
        q10: true,
        q11: true,
        q12: true,

        survey: {
          select: {
            id: true,
          },
        },

        outlet: {
          select: {
            id: true,
          },
        },

        yesCount: true,
        noCount: true,

        policeStation: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/outletSurveys")
  async connectOutletSurveys(
    @common.Param() params: PoliceStationWhereUniqueInput,
    @common.Body() body: OutletSurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outletSurveys: {
        connect: body,
      },
    };
    await this.service.updatePoliceStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/outletSurveys")
  async updateOutletSurveys(
    @common.Param() params: PoliceStationWhereUniqueInput,
    @common.Body() body: OutletSurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outletSurveys: {
        set: body,
      },
    };
    await this.service.updatePoliceStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/outletSurveys")
  async disconnectOutletSurveys(
    @common.Param() params: PoliceStationWhereUniqueInput,
    @common.Body() body: OutletSurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outletSurveys: {
        disconnect: body,
      },
    };
    await this.service.updatePoliceStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/surveys")
  @ApiNestedQuery(SurveyFindManyArgs)
  async findSurveys(
    @common.Req() request: Request,
    @common.Param() params: PoliceStationWhereUniqueInput
  ): Promise<Survey[]> {
    const query = plainToClass(SurveyFindManyArgs, request.query);
    const results = await this.service.findSurveys(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        completedAt: true,
        typeField: true,

        user: {
          select: {
            id: true,
          },
        },

        policeStation: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/surveys")
  async connectSurveys(
    @common.Param() params: PoliceStationWhereUniqueInput,
    @common.Body() body: SurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveys: {
        connect: body,
      },
    };
    await this.service.updatePoliceStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/surveys")
  async updateSurveys(
    @common.Param() params: PoliceStationWhereUniqueInput,
    @common.Body() body: SurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveys: {
        set: body,
      },
    };
    await this.service.updatePoliceStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/surveys")
  async disconnectSurveys(
    @common.Param() params: PoliceStationWhereUniqueInput,
    @common.Body() body: SurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveys: {
        disconnect: body,
      },
    };
    await this.service.updatePoliceStation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
