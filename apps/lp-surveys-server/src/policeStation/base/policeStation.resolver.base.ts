/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PoliceStation } from "./PoliceStation";
import { PoliceStationCountArgs } from "./PoliceStationCountArgs";
import { PoliceStationFindManyArgs } from "./PoliceStationFindManyArgs";
import { PoliceStationFindUniqueArgs } from "./PoliceStationFindUniqueArgs";
import { CreatePoliceStationArgs } from "./CreatePoliceStationArgs";
import { UpdatePoliceStationArgs } from "./UpdatePoliceStationArgs";
import { DeletePoliceStationArgs } from "./DeletePoliceStationArgs";
import { OutletSurveyFindManyArgs } from "../../outletSurvey/base/OutletSurveyFindManyArgs";
import { OutletSurvey } from "../../outletSurvey/base/OutletSurvey";
import { SurveyFindManyArgs } from "../../survey/base/SurveyFindManyArgs";
import { Survey } from "../../survey/base/Survey";
import { Province } from "../../province/base/Province";
import { PoliceStationService } from "../policeStation.service";
@graphql.Resolver(() => PoliceStation)
export class PoliceStationResolverBase {
  constructor(protected readonly service: PoliceStationService) {}

  async _policeStationsMeta(
    @graphql.Args() args: PoliceStationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PoliceStation])
  async policeStations(
    @graphql.Args() args: PoliceStationFindManyArgs
  ): Promise<PoliceStation[]> {
    return this.service.policeStations(args);
  }

  @graphql.Query(() => PoliceStation, { nullable: true })
  async policeStation(
    @graphql.Args() args: PoliceStationFindUniqueArgs
  ): Promise<PoliceStation | null> {
    const result = await this.service.policeStation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PoliceStation)
  async createPoliceStation(
    @graphql.Args() args: CreatePoliceStationArgs
  ): Promise<PoliceStation> {
    return await this.service.createPoliceStation({
      ...args,
      data: {
        ...args.data,

        province: args.data.province
          ? {
              connect: args.data.province,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PoliceStation)
  async updatePoliceStation(
    @graphql.Args() args: UpdatePoliceStationArgs
  ): Promise<PoliceStation | null> {
    try {
      return await this.service.updatePoliceStation({
        ...args,
        data: {
          ...args.data,

          province: args.data.province
            ? {
                connect: args.data.province,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PoliceStation)
  async deletePoliceStation(
    @graphql.Args() args: DeletePoliceStationArgs
  ): Promise<PoliceStation | null> {
    try {
      return await this.service.deletePoliceStation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [OutletSurvey], { name: "outletSurveys" })
  async findOutletSurveys(
    @graphql.Parent() parent: PoliceStation,
    @graphql.Args() args: OutletSurveyFindManyArgs
  ): Promise<OutletSurvey[]> {
    const results = await this.service.findOutletSurveys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Survey], { name: "surveys" })
  async findSurveys(
    @graphql.Parent() parent: PoliceStation,
    @graphql.Args() args: SurveyFindManyArgs
  ): Promise<Survey[]> {
    const results = await this.service.findSurveys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Province, {
    nullable: true,
    name: "province",
  })
  async getProvince(
    @graphql.Parent() parent: PoliceStation
  ): Promise<Province | null> {
    const result = await this.service.getProvince(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
