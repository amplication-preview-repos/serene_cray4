/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PoliceStation as PrismaPoliceStation,
  OutletSurvey as PrismaOutletSurvey,
  Survey as PrismaSurvey,
  Province as PrismaProvince,
} from "@prisma/client";

export class PoliceStationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PoliceStationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.policeStation.count(args);
  }

  async policeStations(
    args: Prisma.PoliceStationFindManyArgs
  ): Promise<PrismaPoliceStation[]> {
    return this.prisma.policeStation.findMany(args);
  }
  async policeStation(
    args: Prisma.PoliceStationFindUniqueArgs
  ): Promise<PrismaPoliceStation | null> {
    return this.prisma.policeStation.findUnique(args);
  }
  async createPoliceStation(
    args: Prisma.PoliceStationCreateArgs
  ): Promise<PrismaPoliceStation> {
    return this.prisma.policeStation.create(args);
  }
  async updatePoliceStation(
    args: Prisma.PoliceStationUpdateArgs
  ): Promise<PrismaPoliceStation> {
    return this.prisma.policeStation.update(args);
  }
  async deletePoliceStation(
    args: Prisma.PoliceStationDeleteArgs
  ): Promise<PrismaPoliceStation> {
    return this.prisma.policeStation.delete(args);
  }

  async findOutletSurveys(
    parentId: string,
    args: Prisma.OutletSurveyFindManyArgs
  ): Promise<PrismaOutletSurvey[]> {
    return this.prisma.policeStation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .outletSurveys(args);
  }

  async findSurveys(
    parentId: string,
    args: Prisma.SurveyFindManyArgs
  ): Promise<PrismaSurvey[]> {
    return this.prisma.policeStation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .surveys(args);
  }

  async getProvince(parentId: string): Promise<PrismaProvince | null> {
    return this.prisma.policeStation
      .findUnique({
        where: { id: parentId },
      })
      .province();
  }
}
