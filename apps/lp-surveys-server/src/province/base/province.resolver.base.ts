/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Province } from "./Province";
import { ProvinceCountArgs } from "./ProvinceCountArgs";
import { ProvinceFindManyArgs } from "./ProvinceFindManyArgs";
import { ProvinceFindUniqueArgs } from "./ProvinceFindUniqueArgs";
import { CreateProvinceArgs } from "./CreateProvinceArgs";
import { UpdateProvinceArgs } from "./UpdateProvinceArgs";
import { DeleteProvinceArgs } from "./DeleteProvinceArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { OutletFindManyArgs } from "../../outlet/base/OutletFindManyArgs";
import { Outlet } from "../../outlet/base/Outlet";
import { PoliceStationFindManyArgs } from "../../policeStation/base/PoliceStationFindManyArgs";
import { PoliceStation } from "../../policeStation/base/PoliceStation";
import { ProvinceService } from "../province.service";
@graphql.Resolver(() => Province)
export class ProvinceResolverBase {
  constructor(protected readonly service: ProvinceService) {}

  async _provincesMeta(
    @graphql.Args() args: ProvinceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Province])
  async provinces(
    @graphql.Args() args: ProvinceFindManyArgs
  ): Promise<Province[]> {
    return this.service.provinces(args);
  }

  @graphql.Query(() => Province, { nullable: true })
  async province(
    @graphql.Args() args: ProvinceFindUniqueArgs
  ): Promise<Province | null> {
    const result = await this.service.province(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Province)
  async createProvince(
    @graphql.Args() args: CreateProvinceArgs
  ): Promise<Province> {
    return await this.service.createProvince({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Province)
  async updateProvince(
    @graphql.Args() args: UpdateProvinceArgs
  ): Promise<Province | null> {
    try {
      return await this.service.updateProvince({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Province)
  async deleteProvince(
    @graphql.Args() args: DeleteProvinceArgs
  ): Promise<Province | null> {
    try {
      return await this.service.deleteProvince(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [User], { name: "users" })
  async findUsers(
    @graphql.Parent() parent: Province,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Outlet], { name: "outlets" })
  async findOutlets(
    @graphql.Parent() parent: Province,
    @graphql.Args() args: OutletFindManyArgs
  ): Promise<Outlet[]> {
    const results = await this.service.findOutlets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PoliceStation], { name: "policeStations" })
  async findPoliceStations(
    @graphql.Parent() parent: Province,
    @graphql.Args() args: PoliceStationFindManyArgs
  ): Promise<PoliceStation[]> {
    const results = await this.service.findPoliceStations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
