/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Province as PrismaProvince,
  User as PrismaUser,
  Outlet as PrismaOutlet,
  PoliceStation as PrismaPoliceStation,
} from "@prisma/client";

export class ProvinceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProvinceCountArgs, "select">): Promise<number> {
    return this.prisma.province.count(args);
  }

  async provinces(
    args: Prisma.ProvinceFindManyArgs
  ): Promise<PrismaProvince[]> {
    return this.prisma.province.findMany(args);
  }
  async province(
    args: Prisma.ProvinceFindUniqueArgs
  ): Promise<PrismaProvince | null> {
    return this.prisma.province.findUnique(args);
  }
  async createProvince(
    args: Prisma.ProvinceCreateArgs
  ): Promise<PrismaProvince> {
    return this.prisma.province.create(args);
  }
  async updateProvince(
    args: Prisma.ProvinceUpdateArgs
  ): Promise<PrismaProvince> {
    return this.prisma.province.update(args);
  }
  async deleteProvince(
    args: Prisma.ProvinceDeleteArgs
  ): Promise<PrismaProvince> {
    return this.prisma.province.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.province
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async findOutlets(
    parentId: string,
    args: Prisma.OutletFindManyArgs
  ): Promise<PrismaOutlet[]> {
    return this.prisma.province
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .outlets(args);
  }

  async findPoliceStations(
    parentId: string,
    args: Prisma.PoliceStationFindManyArgs
  ): Promise<PrismaPoliceStation[]> {
    return this.prisma.province
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .policeStations(args);
  }
}
